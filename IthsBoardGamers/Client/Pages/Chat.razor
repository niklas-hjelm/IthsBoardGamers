@page "/Chat"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using IthsBoardGamers.Shared.DTOs
@attribute [Authorize]

@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject HttpClient _client;

<h3>Chat</h3>

<EditForm Model="CurrentChatMessage" OnValidSubmit="SendMessage">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Message</label>
        <InputText class="form-control" @bind-Value="CurrentChatMessage.Message"></InputText>
    </div>
    <button class="btn btn-primary" type="submit">Send Message</button>
</EditForm>
<hr />
<div class="container">
    <Virtualize Items="AllMessages.OrderByDescending(m=>m.TimeSent).ToList()" Context="message">
        <div class="card-body">
            <p class="d-flex flex-row justify-content-start">@message.Sender</p>
            <p class="small p-2 me-3 mb-1 text-info rounded-3 bg-dark">@message.Message</p>
            <p class="small ms-3 mb-3 rounded-3 text-muted">@message.TimeSent.ToString("HH:mm")</p>
        </div>
    </Virtualize>
</div>

@code {
    HubConnection _chatHub;
    List<ChatMessageDto> AllMessages { get; } = new();
    ChatMessageDto CurrentChatMessage { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _chatHub = new HubConnectionBuilder().WithUrl(_navigationManager.BaseUri + "hubs/chatHub").Build();
        _chatHub.On<ChatMessageDto>("BroadcastMessage", (message) =>
        {
            AllMessages.Add(message);
            StateHasChanged();
        });
        await _chatHub.StartAsync();

        var response = await _client.GetFromJsonAsync<List<ChatMessageDto>>(_client.BaseAddress + "allMessages");
        if (response is not null)
        {
            AllMessages.AddRange(response);
        }

        await base.OnInitializedAsync();
    }

    private async Task SendMessage()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("");
            return;
        }
        if (CurrentChatMessage.Sender is null)
        {
            var emailClaim = user.FindFirst(p => p.Type == "preferred_username");
            if (emailClaim is null)
            {
                _navigationManager.NavigateTo("");
                return;
            }

            CurrentChatMessage.Sender = new UserDto() {Email = emailClaim.Value, Name = user.Identity.Name};
        }

        CurrentChatMessage.TimeSent = DateTime.Now;
        await _chatHub.SendAsync("BroadcastMessage", CurrentChatMessage);
        CurrentChatMessage.Message = string.Empty;
    }

}